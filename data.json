{
    "bin": {
        "cat.js": "/**\n * **********************************\n * 函数名: cat\n * 功能: 输出文件内容\n * **********************************\n * @param {Array} argv - 参数(文件路径)\n * @returns {String} - HTML文本\n */\n\nif (argv.length == 0) {\n    return `<span style=\"color: red\">${SyntaxError(languageData['parameterError'][sys.getVar(\"language\")])}</span><br>`;\n}\n\nlet p = term.getRealPath(argv[0]);\nlet text = sys.getData(sys.storedData, p, false, true);\n\nreturn `<span style=\"white-space: pre;\">${text}</span>`;",
        "cd.js": "/**\n * **********************************\n * 函数名: cd\n * 功能: 切换到指定目录(修改全局变量directory)\n * **********************************\n * @param {Array} argv - 参数(路径)\n * @returns {String} - HTML文本\n */\nif (argv.length != 1) {\n    return `<span style=\"color: red\">${SyntaxError(languageData['parameterError'][sys.getVar(\"language\")])}</span><br>`;\n}\n\n// 获取需切换目录的信息，主要用于判断是否存在\nlet path = term.getRealPath(argv[0]);\nlet pathData = sys.getData(sys.storedData, path);\n\n\nif (pathData == -1) {    // 如果目标不存在\n    return `<span style=\"color: red\">${languageData['error'][sys.getVar(\"language\")] + languageData['notFound'][sys.getVar(\"language\")]}</span><br>`;\n} else if (pathData == -2) {   // 如果目标为文件\n    return `<span style=\"color: red\">${languageData['error'][sys.getVar(\"language\")] + argv[0] + languageData['notFolder'][sys.getVar(\"language\")]}</span><br>`\n} else {\n    term.setWorkPath(path);\n    return \"\";\n}\n",
        "cl.js": "/**\n * **********************************\n * 函数名: cl\n * 功能: 切换语言\n * **********************************\n * @param {Array} argv - 参数(语言名称)\n * @returns {String} - HTML文本\n */\nif (argv[0] in languageName) {\n    sys.setVar(\"language\", argv[0]);\n    return ``;\n}\n\nreturn `<span style=\"color: red\">Can not find the language named ${argv[0]}</span><br>`;\n",
        "clear.js": "/**\n * **********************************\n * 函数名: clear\n * 功能: 清空控制台输出\n * **********************************\n * @param {Array} argv - 参数(无)\n * @returns {String} - HTML文本\n */\n\n$(\"#terminal > *\").each(\n    (_i, e) => {\n        if (e.tagName != \"INPUT\" && e.tagName != \"SCRIPT\")\n            e.remove();\n    }\n);\nreturn \"\";",
        "copy.js": "/**\n * **********************************\n * 函数名: copy\n * 功能: 复制文件\n * **********************************\n * @param {Array} argv - 参数(源文件路径，目标文件路径)\n * @returns {String} - HTML文本\n */\n\nlet content = sys.getData(sys.storedData, term.getRealPath(argv[0]), true, true);\nsys.writeData(term.getRealPath(argv[1]), content);\nreturn `<br>`;\n",
        "help.js": "/**\n * **********************************\n * 函数名: help\n * 功能: 输出帮助\n * **********************************\n * @param {Array} argv - 参数(无)\n * @returns {String} - HTML文本\n */\n\nterm.print(\n`一个简易的Javascript仿写Linux命令行\n\n命令:\n    help 显示帮助信息\n    refresh 更新Cookie中缓存的data.json数据\n    cat <path> 查看文件内容，可使用相对路径\n    ls <path> 查看当前文件夹的子文件(夹)\n    cd <path> 进入目录，可使用相对路径\n    clear 清屏\n    mkdir <path> 创建文件夹\n    vim <path> 修改文件，请使用 :w 退出(不带q)\n    cl <language name> 修改语言\n    touch <path> 创建文件\n    copy <pathA> <pathB> 复制文件\n`)\n\nreturn \"<br>\";",
        "ls.js": "/**\n * **********************************\n * 函数名: ls\n * 功能: 列举目录与文件\n * **********************************\n * @param {Array} argv - 参数(路径)\n * @returns {String} - HTML文本\n */\n\nlet d = sys.getData(sys.storedData, (argv.length == 0)?term.workPath: term.getRealPath(argv[0]));\nlet dirList = [], fileList = [];\n\nfor (let key in d) {\n    if (typeof d[key] == typeof {}) {\n        dirList.push(key);\n    } else {\n        fileList.push(key);\n    }\n}\n    \nconsole.log(dirList, fileList);\nreturn `<span style=\"color: yellow\">${Object.keys(d).filter(function(key){return typeof d[key]=='object'}).join(\" \")}</span>\n        <span style=\"color: deepskyblue\">${Object.keys(d).filter(function(key){return typeof d[key]=='string'}).join(\" \")}</span><br>`;",
        "mkdir.js": "/**\n * **********************************\n * 函数名: mkdir\n * 功能: 创建文件夹\n * **********************************\n * @param {Array} argv - 参数(路径)\n * @returns {String} - HTML文本\n */\n\nif (argv.length == 0) {\n    return `<span style=\"color: red\">${SyntaxError(languageData['parameterError'][sys.getVar(\"language\")])}</span><br>`;\n}\nelse if (argv.length == 1) {\n    argv = argv[0];\n}\n\nsys.getData(sys.storedData, term.getRealPath(argv), true, false);\nreturn \"\";",
        "refresh.js": "/**\n * **********************************\n * 函数名: refresh\n * 功能: 刷新data.json\n * **********************************\n * @param {Array} argv - 参数(无)\n * @returns {String} - HTML文本\n */\n\ngetJson();\ndirectory = [];\nreturn `<span>${languageData['updateData'][sys.getVar(\"language\")]}</span><br>`;",
        "touch.js": "/**\n * **********************************\n * 函数名: touch\n * 功能: 创造文件\n * **********************************\n * @param {Array} argv - 参数(文件路径)\n * @returns {String} - HTML文本\n */\n\nsys.getData(sys.storedData, term.getRealPath(argv[0]), true, true);\nreturn ``;",
        "vim.js": "/**\n * **********************************\n * 函数名: vim\n * 功能: 编辑文件\n * **********************************\n * @param {Array} argv - 参数(文件路径)\n * @returns {String} - HTML文本\n */\n\nif (argv.length == 0) {\n    return `<span style=\"color: red\">${SyntaxError(languageData['parameterError'][sys.getVar(\"language\")])}</span><br>`;\n}\n\n// 通过判断后缀来实现高亮\nlet extensions = {\n    'md': 'markdown',\n    'py': 'python',\n    'txt': 'null'\n};\n\nlet mode = argv[0].split(\".\").slice(-1)[0]; // 获取后缀\nmode = (mode in extensions) ? extensions[mode] : \"null\"; // 获取模式\n\nconsole.log(mode);\n\nlet filePath = term.getRealPath(argv[0]);\n\n// 设置保存函数\nCodeMirror.commands.save = function (e) {\n    terminal.setAttribute(\"style\", \"\");\n    sys.writeData(filePath, editor.getValue(), false);\n    $(\".CodeMirror\").remove();\n    term.refocus();\n};\n\n// 获取需读取的文件内容\nlet fileContent = sys.getData(\n    sys.storedData,\n    filePath,\n    true,\n    true\n);\n\nlet editor = CodeMirror(\n    document.body,\n    {\n        value: fileContent,\n        lineNumbers: true,\n        mode: mode,\n        keyMap: \"vim\",\n        matchBrackets: true,\n        showCursorWhenSelecting: true,\n        inputStyle: \"contenteditable\",\n        theme: \"ayu-mirage\"\n    }\n);\neditor.focus()\n\n// 隐藏终端界面\nterminal.setAttribute(\"style\", \"display:none;\");\n\nreturn \"<br>\";"
    },
    "boot": {},
    "home": {
        "1": {},
        "m.txt": "if"
    },
    "root": {},
    "test.txt": "第一行\n第二行\\n\n第三行",
    "tmp": {}
}