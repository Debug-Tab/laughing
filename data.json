{
  "name": "/",
  "data": [
    {
      "name": "bin",
      "data": [
        {
          "name": "cat.js",
          "data": "function cat(argv) {\n    let p = getRealPath(argv[0]);\n    let text = getData(dir, p, false, true)['data'];\n    return `<span style=\"white-space: pre;\">${text}</span><br>`;\n}"
        },
        {
          "name": "cd.js",
          "data": "/**\n * **********************************\n * 函数名: cd\n * 功能: 尝试切换到指定目录(修改全局变量directory)\n * **********************************\n * @param {Array} argv - 参数\n * @returns {String}\n */\nfunction cd(argv) {\n    if (argv.length != 1) {\n        return `<span style=\"color: red\">${languageData['error'][language] + languageData['argError'][language] + \"1\"}</span><br>`\n    }\n\n    //获取需切换目录的信息，主要用于判断是否存在\n    let path = getRealPath(argv[0]);\n    let pathData = getData(dir, path);\n\n\n    if (pathData == -1) {    //如果目标不存在\n        return `<span style=\"color: red\">${languageData['error'][language] + languageData['notFound'][language]}</span><br>`;\n    } else if (pathData == -2) {   //如果目标为文件\n        return `<span style=\"color: red\">${languageData['error'][language] + argv[0] + languageData['notFolder'][language]}</span><br>`\n    } else {\n        directory = path;\n        return \"\";\n    }\n}"
        },
        {
          "name": "clear.js",
          "data": "function clear(argv) {\n    var child = terminal.firstChild;\n    var last = terminal.lastChild;\n    var t;\n    while (child != last) {\n        t = child;\n        child = child.nextSibling;\n        if (t.tagName != \"INPUT\" && t.tagName != \"SCRIPT\") t.remove();\n    }\n    return \"\";\n}"
        },
        {
          "name": "ls.js",
          "data": "function ls(argv) {\n    let Cdir = getData(dir, directory);\n    let name = getAllName_Data(Cdir[\"data\"]);\n    let dirList = [], fileList = [];\n    for (let t in name) {\n        if (typeof name[t][\"data\"] == typeof []) {\n            //dirList.push(name[t]);\n            dirList.push(t);\n        } else {\n            //fileList.push(name[t]);\n            fileList.push(t);\n        }\n    }\n    console.log(dirList, fileList);\n    return `<span style=\"color: yellow\">${dirList.join(\" \")}</span>\n            <span style=\"color: deepskyblue\">${fileList.join(\" \")}</span><br>`;\n}"
        },
        {
          "name": "mkdir.js",
          "data": "function mkdir(argv) {\n    getData(dir, getRealPath(argv[0]), true)\n    return \"\";\n}"
        },
        {
          "name": "update.js",
          "data": "function update(argv) {\n    getJson();\n    directory = [];\n    return `<span>${languageData['updateData'][language]}</span><br>`;\n}"
        },
        {
          "name": "vim.js",
          "data": "function vim(argv) {\n    //通过判断后缀来实现高亮\n    let extensions = {\n        'md': 'markdown',\n        'py': 'python',\n        'txt': 'null'\n    };\n\n    let mode = argv[0].split(\".\").slice(-1)[0]; //获取后缀\n    mode = (mode in extensions) ? extensions[mode] : \"null\"; //获取模式\n\n    console.log(mode);\n\n    //设置保存函数\n    CodeMirror.commands.save = function (e) {\n        terminal.setAttribute(\"style\", \"\");\n        getData(dir, getRealPath(argv[0]), true, true)[\"data\"] = editor.getValue();\n        $(\".CodeMirror\").remove();\n    };\n\n    //获取需读取的文件内容\n    let fileContent = getData(\n        dir,\n        getRealPath(argv[0]),\n        true,\n        true\n    )['data'];\n\n    let editor = CodeMirror(document.body,\n        {\n            value: fileContent,\n            lineNumbers: true,\n            mode: mode,\n            keyMap: \"vim\",\n            matchBrackets: true,\n            showCursorWhenSelecting: true,\n            inputStyle: \"contenteditable\",\n            theme: \"ayu-mirage\"\n        }\n    );\n    editor.focus()\n\n    //隐藏终端界面\n    terminal.setAttribute(\"style\", \"display:none;\");\n\n    return \"<br>\"\n}"
        }
      ]
    },
    {
      "name": "111",
      "data": [
        {
          "name": "1",
          "data": []
        },
        {
          "name": "m.txt",
          "data": "if"
        }
      ]
    },
    {
      "name": "data.py",
      "data": "from pathlib import Path\nimport json\nimport sys\n\ndef getPath(path):\n    json = {\n        'name': path.name,\n        'data': []\n    }\n    for i in Path.iterdir(path):\n        if Path.is_dir(i):\n            json['data'].append(getPath(i))\n        else:\n            with open(i, 'r', encoding='UTF-8') as f:\n                json['data'].append({\n                    'name': i.name,\n                    'data': f.read()\n                })\n    return json\n\npath = Path(Path.cwd() if len(sys.argv)==1 else sys.argv[1])\njson = json.dumps(getPath(path), indent=4)\nif \"-save\" in sys.argv:\n    with open(sys.argv[sys.argv.index(\"-save\")+1], 'w') as f:\n        f.write(json)\nelse:\n    print(json)\n"
    },
    {
      "name": "make.js",
      "data": "ttt\n{}\n\"\"\n\\"
    },
    {
      "name": "test.txt",
      "data": "第一行\n第二行\\n\n第三行"
    }
  ]
}