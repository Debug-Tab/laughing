{
    "bin": {
        "cat.js": "/**\n * **********************************\n * 函数名: cat\n * 功能: 输出文件内容\n * **********************************\n * @param {Array} argv - 参数(文件路径)\n * @returns {String} - HTML文本\n */\n\nif (argv.length != 1) {\n    throw new ParameterError(`cat expects 1 arguments.`);\n}\n\nlet path = new Path(argv[0]);\nlet text = System.getData(path, false, true);\n\nif (text === -1) {    // 如果目标不存在\n    throw new FileError(`No such file or directory.`);\n}\n\nreturn `<span style=\"white-space: pre;\">${text}</span>`;\n",
        "cd.js": "/**\n * **********************************\n * 函数名: cd\n * 功能: 切换到指定目录(修改全局变量directory)\n * **********************************\n * @param {Array} argv - 参数(路径)\n * @returns {String} - HTML文本\n */\nif (argv.length != 1) {\n    throw new ParameterError(`cd expects 1 arguments.`);\n}\n\n// 获取需切换目录的信息，主要用于判断是否存在\nlet path = new Path(argv[0]);\nlet pathData = path.data;\n\n\nif (pathData == -1) {    // 如果目标不存在\n    throw new FileError(`No such file or directory.`);\n} else if (pathData == -2) {   // 如果目标为文件\n    throw new FileError(`${argv[0]} is not a folder.`);\n} else {\n    Terminal.setWorkPath(path.path);\n    return \"\";\n}\n",
        "cl.js": "/**\n * **********************************\n * 函数名: cl\n * 功能: 切换语言\n * **********************************\n * @param {Array} argv - 参数(语言名称)\n * @returns {String} - HTML文本\n */\nif (argv[0] in languageName) {\n    System.setVar(\"language\", argv[0]);\n    return ``;\n}\n\nreturn `<span style=\"color: red\">Can not find the language named ${argv[0]}</span><br>`;\n",
        "clear.js": "/**\n * **********************************\n * 函数名: clear\n * 功能: 清空控制台输出\n * **********************************\n * @param {Array} argv - 参数(无)\n * @returns {String} - HTML文本\n */\n\n$(\"#terminal > *\").each((_i, e) => {\n    if (e.tagName != \"INPUT\" && e.tagName != \"SCRIPT\") e.remove();\n});\nreturn \"\";\n",
        "cp.js": "/**\n * **********************************\n * 函数名: copy\n * 功能: 复制文件\n * **********************************\n * @param {Array} argv - 参数(源文件路径，目标文件路径)\n * @returns {String} - HTML文本\n */\n\nif (argv.length != 2) {\n    throw new ParameterError(`copy expects 2 arguments.`);\n}\n\nlet source = new Path(argv[0]);\nlet target = new Path(argv[1]);\n\nlet content = System.getData(source, true, true);\nif (target.exist) {\n    console.log(target.path.concat(source.name), content);\n    System.writeData(target.path.concat(source.name), content);\n} else {\n    System.writeData(target, content);\n}\n\nreturn `<br>`;\n",
        "help.js": "/**\n * **********************************\n * 函数名: help\n * 功能: 输出帮助\n * **********************************\n * @param {Array} argv - 参数(无)\n * @returns {String} - HTML文本\n */\n\nterm.print(\n    `一个简易的Javascript仿写Linux命令行\n\n命令:\n    help 显示帮助信息\n    refresh 更新Cookie中缓存的data.json数据\n    cat <path> 查看文件内容，可使用相对路径\n    ls <path> 查看当前文件夹的子文件(夹)\n    cd <path> 进入目录，可使用相对路径\n    clear 清屏\n    mkdir <path> 创建文件夹\n    vim <path> 修改文件，请使用 :w 退出(不带q)\n    cl <language name> 修改语言\n    touch <path> 创建文件\n    copy <pathA> <pathB> 复制文件\n`\n);\n\nreturn \"<br>\";\n",
        "ls.js": "/**\n * **********************************\n * 函数名: ls\n * 功能: 列举目录与文件\n * **********************************\n * @param {Array} argv - 参数(路径)\n * @returns {String} - HTML文本\n */\n\nif (argv.length > 1) {\n    throw new ParameterError(`ls expects 0 or 1 arguments.`);\n}\n\nlet d = System.getData(\n    argv.length == 0 ? Terminal.workPath : new Path(argv[0])\n);\nlet dirList = [],\n    fileList = [];\n\nfor (let key in d) {\n    if (typeof d[key] == typeof {}) {\n        dirList.push(key);\n    } else {\n        fileList.push(key);\n    }\n}\n\nconsole.log(dirList, fileList);\nreturn `<span style=\"color: yellow\">${Object.keys(d)\n    .filter((key) => typeof d[key] == \"object\")\n    .join(\" \")}</span>\n        <span style=\"color: deepskyblue\">${Object.keys(d)\n            .filter((key) => typeof d[key] == \"string\")\n            .join(\" \")}</span><br>`;\n",
        "mkdir.js": "/**\n * **********************************\n * 函数名: mkdir\n * 功能: 创建文件夹\n * **********************************\n * @param {Array} argv - 参数(路径)\n * @returns {String} - HTML文本\n */\n\nif (argv.length != 1) {\n    throw new ParameterError(`mkdir expects 1 arguments.`);\n}\n\npath = new Path(argv[0]);\npath.touch(false);\n\nreturn \"\";\n",
        "pwd.js": "/**\n * **********************************\n * 函数名: pwd\n * 功能: 查看当前目录\n * **********************************\n * @param {Array} argv - 参数(无)\n * @returns {String} - HTML文本\n */\n\n\nreturn `<span>${'/' + Terminal.workPath.join('/')}</span><br>`;\n",
        "refresh.js": "/**\n * **********************************\n * 函数名: refresh\n * 功能: 刷新data.json\n * **********************************\n * @param {Array} argv - 参数(无)\n * @returns {String} - HTML文本\n */\n\ngetStoredDataJson();\ndirectory = [];\nreturn `<span>Successfully updated the data.json of the Cookie cache!</span><br>`;\n",
        "touch.js": "/**\n * **********************************\n * 函数名: touch\n * 功能: 创造文件\n * **********************************\n * @param {Array} argv - 参数(文件路径)\n * @returns {String} - HTML文本\n */\n\nif (argv.length != 1) {\n    throw new ParameterError(`touch expects 1 arguments.`);\n}\n\npath = new Path(argv[0]);\npath.touch(true);\n\nreturn ``;\n",
        "vim.js": "/**\n * **********************************\n * 函数名: vim\n * 功能: 编辑文件\n * **********************************\n * @param {Array} argv - 参数(文件路径)\n * @returns {String} - HTML文本\n */\n\nif (argv.length != 1) {\n    throw new ParameterError(`vim expects 1 arguments.`);\n}\n\n// 通过判断后缀来实现高亮\nlet extensions = {\n    md: \"markdown\",\n    py: \"python\",\n    txt: \"null\",\n};\n\nlet filePath = new Path(argv[0]);\nlet mode = filePath.extName; // 获取后缀\n\nmode = mode in extensions ? extensions[mode] : \"null\"; // 获取模式\n\nconsole.log(mode);\n\n// 设置保存函数\nCodeMirror.commands.save = function (e) {\n    terminal.setAttribute(\"style\", \"\");\n    System.writeData(filePath, editor.getValue(), false);\n    $(\".CodeMirror\").remove();\n    Terminal.refocus();\n};\n\n// 获取需读取的文件内容\nlet fileContent = System.getData(filePath, true, true);\n\nlet editor = CodeMirror(document.body, {\n    value: fileContent,\n    lineNumbers: true,\n    mode: mode,\n    keyMap: \"vim\",\n    matchBrackets: true,\n    showCursorWhenSelecting: true,\n    inputStyle: \"contenteditable\",\n    theme: \"ayu-mirage\",\n});\neditor.focus();\n\n// 隐藏终端界面\nterminal.setAttribute(\"style\", \"display:none;\");\n\nreturn \"<br>\";\n"
    },
    "boot": {
        "boot.js": "\n\n\n"
    },
    "home": {},
    "index.html": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Laughing Terminal</title>\n\n    <script src=\"https://fastly.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js\"></script>\n    <script src=\"https://fastly.jsdelivr.net/npm/jquery.terminal@2.37.2/js/jquery.terminal.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://fastly.jsdelivr.net/npm/jquery.terminal@2.37.2/css/jquery.terminal.min.css\">\n\n    <script src=\"https://fastly.jsdelivr.net/npm/js-cookie@3.0.1/dist/js.cookie.min.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\">\n\n    <!-- CodeMirror -->\n    <link rel=\"stylesheet\" href=\"https://fastly.jsdelivr.net/npm/codemirror/lib/codemirror.css\">\n    <link rel=\"stylesheet\" href=\"https://fastly.jsdelivr.net/npm/codemirror/addon/dialog/dialog.css\">\n    <script src=\"https://fastly.jsdelivr.net/npm/codemirror/lib/codemirror.js\"></script>\n    <script src=\"https://fastly.jsdelivr.net/npm/codemirror/addon/dialog/dialog.js\"></script>\n    <script src=\"https://fastly.jsdelivr.net/npm/codemirror/addon/search/searchcursor.js\"></script>\n    <script src=\"https://fastly.jsdelivr.net/npm/codemirror/addon/edit/matchbrackets.js\"></script>\n    <script src=\"https://fastly.jsdelivr.net/npm/codemirror/keymap/vim.js\"></script>\n\n    <!-- 主题 -->\n    <link rel=\"stylesheet\" href=\"https://fastly.jsdelivr.net/npm/codemirror/theme/dracula.css\"/>\n    <link rel=\"stylesheet\" href=\"https://fastly.jsdelivr.net/npm/codemirror/theme/midnight.css\">\n    <link rel=\"stylesheet\" href=\"https://fastly.jsdelivr.net/npm/codemirror/theme/solarized.css\">\n    <link rel=\"stylesheet\" href=\"https://fastly.jsdelivr.net/npm/codemirror/theme/ayu-mirage.css\">\n\n    <!-- 语法高亮 -->\n    <script src=\"https://fastly.jsdelivr.net/npm/codemirror/mode/clike/clike.js\"></script>\n    <script src=\"https://fastly.jsdelivr.net/npm/codemirror/mode/markdown/markdown.js\"></script>\n    <script src=\"https://fastly.jsdelivr.net/npm/codemirror/mode/python/python.js\"></script>\n    <style>\n        .CodeMirror {\n            height: 100%;\n            width: 100%;\n            position: absolute;\n        }\n    </style>\n\n</head>\n<body>\n<div id=\"terminal\">\n    <div id=\"welcome\">\n        <pre class=\"text-gradient\">\n /$$                                     /$$       /$$\n| $$                                    | $$      |__/\n| $$        /$$$$$$  /$$   /$$  /$$$$$$ | $$$$$$$  /$$ /$$$$$$$   /$$$$$$\n| $$       |____  $$| $$  | $$ /$$__  $$| $$__  $$| $$| $$__  $$ /$$__  $$\n| $$        /$$$$$$$| $$  | $$| $$  \\ $$| $$  \\ $$| $$| $$  \\ $$| $$  \\ $$\n| $$       /$$__  $$| $$  | $$| $$  | $$| $$  | $$| $$| $$  | $$| $$  | $$\n| $$$$$$$$|  $$$$$$$|  $$$$$$/|  $$$$$$$| $$  | $$| $$| $$  | $$|  $$$$$$$\n|________/ \\_______/ \\______/  \\____  $$|__/  |__/|__/|__/  |__/ \\____  $$\n                               /$$  \\ $$                         /$$  \\ $$\n                              |  $$$$$$/                        |  $$$$$$/\n                               \\______/                          \\______/\n        </pre>\n\n    </div>\n    <!-- Go! -->\n    <input id=\"terminal-input\" type=\"text\" autofocus=\"autofocus\"/>\n\n</div>\n<script src=\"./main.js\"></script>\n\n</body>\n</html>",
    "main.js": "/*********************************************/\n/*    File names: main.js                    */\n/*    Function: MAIN                         */\n/*    Last update: 2024.5.25                 */\n/*    dependencies: jQuery, Js-cookie        */\n/*********************************************/\n\n\nclass ParameterError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"ParameterError\";\n    }\n}\n\nclass FileError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"FileError\";\n    }\n}\n\nconst System = new (class {\n    constructor() {\n        this.sysVar = {\n            storedData: {}, // 存储数据\n            host: window.location.hostname\n                ? window.location.hostname\n                : \"localhost\", // 本地名\n            language: \"zh-cn\", // 语言\n            env: [[\"bin\"], [\"boot\"]], // 环境变量\n            debugMode: true, // 调试模式\n        };\n        this._cache = {};\n    }\n\n    get debugMode() {\n        return this.sysVar.debugMode;\n    }\n\n    cache(name) {\n        return this._cache[name];\n    }\n\n    addCache(name, func) {\n        this._cache[name] = func;\n    }\n\n    find(relativePath) {\n        if (relativePath.constructor == Path) {\n            relativePath = relativePath.path;\n        }\n\n        for (const i of this.getVar(\"env\")) {\n            console.log(i.concat(relativePath));\n            let path = new Path(i.concat(relativePath));\n            if (path.exist) {\n                return path;\n            }\n        }\n\n        return -1;\n    }\n\n    call(command, ...argv) {\n        let path = this.find([command + \".js\"]);\n\n        if (path === -1)\n            return `<span style=\"color: red\">Cannot find the \"${command}\" !</span><br>`;\n\n        if (!(command in this._cache)) {\n            let funcText = this.getData(path, false, true);\n            //funcText += `return ${name}(${JSON.stringify(argv)})`;\n            this.addCache(command, new Function(\"argv\", funcText));\n        }\n\n        if (this.debugMode) return this.cache(command)(argv);\n\n        try {\n            return this.cache(command)(argv);\n        } catch (e) {\n            return `<span style=\"color: red\">${e}</span><br>`;\n        }\n    }\n\n    setTerminal(term) {\n        this.term = term;\n    }\n\n    getVar(key) {\n        return this.sysVar[key];\n    }\n\n    setVar(key, data) {\n        this.sysVar[key] = data;\n        return 0;\n    }\n\n    get storedData() {\n        return this.sysVar[\"storedData\"];\n    }\n\n    getData(path, noPath = false, file = false, currentDir = this.storedData) {\n        if (path.constructor === Path) path = path.path;\n        //console.log([currentDir,path]);\n        if (path.length == 0) return currentDir;\n\n        if (path[0] in currentDir) {\n            // 如果存在目标\n            if (currentDir[path[0]].constructor === Object || file) {\n                return path.length == 1\n                    ? currentDir[path[0]]\n                    : this.getData(\n                          path.slice(1),\n                          noPath,\n                          file,\n                          currentDir[path[0]]\n                      );\n            }\n            console.log(file);\n            return -2;\n        }\n\n        if (noPath) {\n            if (path.length == 1) {\n                currentDir[path[0]] = file ? \"\" : {}; // 如果是文件则data为字符串\n                return currentDir[path[0]];\n            } else {\n                currentDir[path[0]] = {};\n                return this.getData(\n                    path.slice(1),\n                    noPath,\n                    file,\n                    currentDir[path[0]]\n                );\n            }\n        }\n        return -1;\n    }\n\n    writeData(filePath, data, appendMode = false) {\n        if (filePath.constructor == Path) {\n            filePath = filePath.path;\n        }\n\n        if (appendMode) {\n            data = this.getData(filePath, false, true) + data;\n        }\n\n        this.getData(filePath.slice(0, -1))[filePath[filePath.length - 1]] =\n            data;\n\n        return \"<br>\";\n    }\n\n    exist(path, currentDir = this.storedData) {\n        if (path.constructor == Path) {\n            path = path.path;\n        }\n\n        if (path.length == 1) {\n            return path[0] in currentDir;\n        }\n\n        if (!(path[0] in currentDir)) return false;\n\n        return this.exist(path.slice(1), currentDir[path[0]]);\n    }\n})();\n\nconst Terminal = new (class {\n    constructor() {\n        this.termSet = {};\n        this.inputBox = $(\"#terminal-input\")[0];\n        this._workPath = [];\n        this._workingDir = {};\n        // this.sys = sys;\n    }\n\n    get workPath() {\n        return this._workPath;\n    }\n\n    setWorkPath(arg) {\n        this._workingDir = System.getData(arg, false, false);\n        this._workPath = arg;\n    }\n\n    getVar(key) {\n        return this.termSet[key];\n    }\n\n    setVar(key, data) {\n        this.termSet[key] = data;\n        return 0;\n    }\n\n    get inputValue() {\n        return this.inputBox.value;\n    }\n\n    clearInput() {\n        this.inputBox.value = \"\";\n        return 0;\n    }\n\n    htmlEncode(text) {\n        let arrEntities = {\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            \"&\": \"&amp;\",\n            '\"': \"&quot;\",\n        };\n        return text.replace(/[<>&\"]/g, function (c) {\n            return arrEntities[c];\n        });\n    }\n\n    htmlDecode(str) {\n        let arrEntities = { lt: \"<\", gt: \">\", nbsp: \" \", amp: \"&\", quot: '\"' };\n        return str.replace(/&(lt|gt|nbsp|amp|quot);/gi, function (all, t) {\n            return arrEntities[t];\n        });\n    }\n\n    output(str) {\n        $(\"#terminal\")[0].insertBefore(parseHTML(str), this.inputBox);\n    }\n\n    print(text) {\n        this.output(\n            `<span style=\"white-space: pre-wrap; word-wrap: break-word\">${this.htmlEncode(\n                text\n            )}</span>`\n        );\n    }\n\n    refocus() {\n        let that = this;\n        setTimeout(function () {\n            this.inputBox.focus();\n        }, 100);\n    }\n\n    getRealPath(path) {\n        if (path.constructor === String) {\n            path = path.split(\"/\");\n            if (path[0] != \"\") path = this.workPath.concat(path); // 相对路径\n        }\n\n        if (path.constructor === Path) path = path.path;\n        if (path.length == 0) return path;\n\n        path = path.filter((x) => ![\" \", \".\"].includes(x));\n        while (path.includes(\"..\")) {\n            path.splice(path.indexOf(\"..\") - 1, 2);\n        }\n\n        return path;\n    }\n})();\n\nclass Path {\n    constructor(path) {\n        this.path = Terminal.getRealPath(path);\n        this.originalPath = path;\n        this.name = this.path[this.path.length - 1];\n\n        console.log(`${path} ${this.path}(${this.name})`);\n    }\n\n    get exist() {\n        return System.exist(this);\n    }\n\n    get data() {\n        return System.getData(this.path);\n    }\n\n    get extName() {\n        return this.name.split(\".\").slice(-1)[0];\n    }\n\n    touch(isFile) {\n        System.getData(this, true, isFile);\n    }\n}\n\nfunction analysis() {\n    let command = Terminal.inputValue;\n    if (command == \"\") return \"<br>\";\n\n    Terminal.output(`<span>${command}</span><br>`);\n    Terminal.clearInput();\n\n    // 按空格分割，并去除空字符串\n    command = command.split(\" \").filter((x) => x !== \"\");\n\n    // 输出日志\n    console.log(\"Run: \" + command);\n\n    // (暂时)忽略sudo\n    if (command[0] == \"sudo\") command = command.slice(1);\n\n    // try {\n    return System.call(command[0], ...command.slice(1));\n    //} catch (err) {\n    //    return `<span style=\"color: red\">${err}</span><br>`\n    //}\n}\n\n/**\n * **********************************\n * 函数名: getJson\n * 功能: 通过ajax获取data.json\n * **********************************\n */\nfunction getStoredDataJson() {\n    $.ajax({\n        url: \"../../data.json\",\n        type: \"GET\",\n        dataType: \"json\",\n        async: false,\n        success: function (data) {\n            console.log(data);\n            System.setVar(\"storedData\", data);\n            Cookies.set(\"file\", JSON.stringify(System.storedData));\n        },\n    });\n}\n\n/**\n * **********************************\n * 函数名: getData\n * 功能: 获取相应路径的对象\n * **********************************\n * @param {Object} currentDir - 解析的来源，大部分时候是全局变量dir，仅为方便递归\n * @param {Array} path - 需要获取的路径分割后的数组，仅可为绝对路径(可使用getRealPath来将相对路径转为绝对路径)\n * @param {boolean} noPath - 如果为真，表示可能不存在此路径，需创建\n * @param {boolean} file - 是否为文件\n */\n\n/**\n * **********************************\n * 函数名: parseHTML\n * 功能: 将传入的字符串解析为HTML对象\n * **********************************\n * @param {String} html - 需转换的HTML字符串\n * @returns {Object} - 转换后的HTML对象\n */\nfunction parseHTML(html) {\n    let t = document.createElement(\"template\");\n    t.innerHTML = html;\n    return t.content;\n}\n\n/**\n * **********************************\n * 函数名: Output\n * 功能: 在执行命令后渲染新的提示符\n * **********************************\n * @param {String} str - 需输出的HTML字符串\n */\nfunction Output(str) {\n    $(\"#terminal\")[0].insertBefore(parseHTML(str), Terminal.inputBox);\n    return 0;\n}\n\n/**\n * **********************************\n * 函数名: Render\n * 功能: 在执行命令后渲染新的提示符\n * **********************************\n * @param {String} tag - 运行命令后返回的HTML字符串\n */\nfunction Render(tag) {\n    // 合并输出内容\n    let temp = `\n        ${tag}\n        <span class=\"prefix\">[<span id=\"usr\">usr</span>@<span class=\"host\">${System.getVar(\n            \"host\"\n        )}</span> <span\n        id=\"directory\">${\n            \"/\" + Terminal.workPath.join(\"/\")\n        }</span>]<span id=\"pos\">&gt;\n        </span></span>`;\n    Terminal.output(temp);\n    $(\"body,html\").animate(\n        {\n            scrollTop: $(document).height(),\n        },\n        0\n    );\n}\n\n/**\n * **********************************\n * 函数名: keydown\n * 功能: 处理按键\n * **********************************\n */\nfunction keydown(e) {\n    e = e /*|| window.event*/;\n    if (e.keyCode == 13) {\n        Render(analysis());\n        Cookies.set(\"file\", JSON.stringify(System.storedData));\n    }\n}\n\n// 启动！\nmain();\n\n/**\n * **********************************\n * 函数名: main\n * 功能: 主程序，在程序开始时初始化\n * **********************************\n */\nfunction main() {\n    // 操控Cookie，使用Js-cookie(已在index.html中引入)\n    if (document.location.protocol == \"file:\") {\n        Terminal.output(\n            '<br><span style=\"color: red\">WARNING: USING THE FILE PROTOCOL!</span><br>'\n        );\n    }\n\n    if (Cookies.get(\"file\") == undefined) {\n        getStoredDataJson();\n    } else {\n        try {\n            console.log(\"Try to load storedData from cookies\");\n            System.setVar(\n                \"storedData\",\n                JSON.parse(decodeURI(Cookies.get(\"file\")))\n            );\n        } catch (err) {\n            console.log(\"Failed! Cookies: \" + document.cookie);\n            getStoredDataJson();\n        }\n    }\n\n    System.setTerminal(Terminal);\n    console.log(System.call(\"boot\"));\n\n    //Terminal.inputBox.addEventListener('blur', Terminal.refocus);\n    Terminal.inputBox.addEventListener(\"keydown\", keydown);\n\n    Render(\"\"); // 第一个提示符\n}\n",
    "root": {},
    "style.css": "body {\n    background-color: #202A35;\n    overflow: hidden\n}\n\ninput {\n    border-width: 0;\n    outline: none;\n    background-color: transparent;  /* 透明rgba(0, 0, 0, 0) */\n    width: 666px;\n    height: 20px;\n    font-size: 18px;                /* 字体大小 */\n    color: white;\n    display: inline-block;\n}\n\n#terminal span {\n    display: inline-block;\n    font-size: 17px;\n    color: white;\n}\n\np {\n    display: inline-block;\n    font-size: 17px;\n    color: white;\n}\n\n* {\n    cursor: text;\n}\n\n#usr {\n    color: #55ff55 !important;\n}\n\n.host {\n    color: #5555FF !important;\n}\n\n#directory {\n    color: #FFFF55 !important;\n}\n\n@keyframes blink { /* 闪烁 */\n    0% {\n      opacity: 0;\n    }\n    50% {\n      opacity: 1;\n    }\n    100% {\n      opacity: 0;\n    }\n}\n\n#pos {\n    color: #FF5555 !important;\n}\n\n.text-gradient {\n    background: white; /* 兼容旧浏览器 */\n    background-image: linear-gradient(135deg, #FD6585 10%, #0D25B9 100%);\n    -webkit-background-clip: text;\n    color: transparent;\n}",
    "tmp": {}
}