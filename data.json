{
    "bin": {
        "cat.js": "/**\n * **********************************\n * 函数名: cat\n * 功能: 输出文件内容\n * **********************************\n * @param {Array} argv - 参数(文件路径)\n * @returns {String} - HTML文本\n */\n\nfunction cat(argv) {\n    if (argv.length == 0) {\n        return `<span style=\"color: red\">${SyntaxError(languageData['parameterError'][sys.getVar(\"language\")])}</span><br>`;\n    }\n\n    let p = getRealPath(argv[0]);\n    let text = sys.getData(sys.storedData, p, false, true);\n    return `<span style=\"white-space: pre;\">${text}</span>`;\n}\n",
        "cd.js": "/**\n * **********************************\n * 函数名: cd\n * 功能: 切换到指定目录(修改全局变量directory)\n * **********************************\n * @param {Array} argv - 参数(路径)\n * @returns {String} - HTML文本\n */\n\nfunction cd(argv) {\n    if (argv.length != 1) {\n        return `<span style=\"color: red\">${SyntaxError(languageData['parameterError'][sys.getVar(\"language\")])}</span><br>`;\n    }\n\n    // 获取需切换目录的信息，主要用于判断是否存在\n    let path = getRealPath(argv[0]);\n    let pathData = sys.getData(sys.storedData, path);\n\n\n    if (pathData == -1) {    // 如果目标不存在\n        return `<span style=\"color: red\">${languageData['error'][sys.getVar(\"language\")] + languageData['notFound'][sys.getVar(\"language\")]}</span><br>`;\n    } else if (pathData == -2) {   // 如果目标为文件\n        return `<span style=\"color: red\">${languageData['error'][sys.getVar(\"language\")] + argv[0] + languageData['notFolder'][sys.getVar(\"language\")]}</span><br>`\n    } else {\n        term.setVar(\"workPath\", path);\n        return \"\";\n    }\n}\n",
        "cl.js": "/**\n * **********************************\n * 函数名: cl\n * 功能: 切换语言\n * **********************************\n * @param {Array} argv - 参数(语言名称)\n * @returns {String} - HTML文本\n */\n\nfunction cl(argv) {\n    if (argv[0] in languageName) {\n        sys.setVar(\"language\", argv[0]);\n        return ``;\n    }\n    else return `<span style=\"color: red\">Can not find the language named ${argv[0]}</span><br>`;\n}\n",
        "clear.js": "/**\n * **********************************\n * 函数名: clear\n * 功能: 清空控制台输出\n * **********************************\n * @param {Array} argv - 参数(无)\n * @returns {String} - HTML文本\n */\n\nfunction clear(argv) {\n    $(\"#terminal > *\").each(\n        (_i, e) => {\n            if (e.tagName != \"INPUT\" && e.tagName != \"SCRIPT\")\n                e.remove();\n        }\n    );\n    return \"\";\n}\n",
        "copy.js": "/**\n * **********************************\n * 函数名: copy\n * 功能: 复制文件\n * **********************************\n * @param {Array} argv - 参数(源文件路径，目标文件路径)\n * @returns {String} - HTML文本\n */\n\nfunction copy(argv) {\n    let content = sys.getData(sys.storedData, getRealPath(argv[0]), true, true);\n    sys.writeData(getRealPath(argv[1]), content);\n    return `<br>`;\n}\n",
        "help.js": "/**\n * **********************************\n * 函数名: help\n * 功能: 输出帮助\n * **********************************\n * @param {Array} argv - 参数(无)\n * @returns {String} - HTML文本\n */\n\nfunction help(argv) {\n    Output(\n`<span style=\"white-space: pre-wrap; word-wrap: break-word\">\n一个简易的Javascript仿写Linux命令行\n\n命令:\n    help 显示帮助信息\n    refresh 更新Cookie中缓存的data.json数据\n    cat &lt;path&gt; 查看文件内容，可使用相对路径\n    ls &lt;path&gt; 查看当前文件夹的子文件(夹)\n    cd &lt;path&gt; 进入目录，可使用相对路径\n    clear 清屏\n    mkdir &lt;path&gt; 创建文件夹\n    vim &lt;path&gt; 修改文件，请使用 :w 退出(不带q)\n    cl &lt;language name&gt; 修改语言\n    touch &lt;path&gt; 创建文件\n    copy &lt;pathA&gt; &lt;pathB&gt; 复制文件\n</span>`);\n    return '<br>';\n}",
        "ls.js": "/**\n * **********************************\n * 函数名: ls\n * 功能: 列举目录与文件\n * **********************************\n * @param {Array} argv - 参数(路径)\n * @returns {String} - HTML文本\n */\n\nfunction ls(argv) {\n\tlet d = sys.getData(sys.storedData, (argv.length == 0)?term.getVar(\"workPath\"):getRealPath(argv[0]));\n    let dirList = [], fileList = [];\n\n    for (let key in d) {\n        if (typeof d[key] == typeof {}) {\n            dirList.push(key);\n        } else {\n            fileList.push(key);\n        }\n    }\n    \n    console.log(dirList, fileList);\n    return `<span style=\"color: yellow\">${Object.keys(d).filter(function(key){return typeof d[key]=='object'}).join(\" \")}</span>\n            <span style=\"color: deepskyblue\">${Object.keys(d).filter(function(key){return typeof d[key]=='string'}).join(\" \")}</span><br>`;\n}\n",
        "mkdir.js": "/**\n * **********************************\n * 函数名: mkdir\n * 功能: 创建文件夹\n * **********************************\n * @param {Array} argv - 参数(路径)\n * @returns {String} - HTML文本\n */\n\nfunction mkdir(argv) {\n    if (argv.length == 0) {\n        return `<span style=\"color: red\">${SyntaxError(languageData['parameterError'][sys.getVar(\"language\")])}</span><br>`;\n    }\n    else if (argv.length == 1) {\n        argv = argv[0];\n    }\n\n    sys.getData(sys.storedData, getRealPath(argv), true, false);\n    return \"\";\n}\n",
        "refresh.js": "/**\n * **********************************\n * 函数名: refresh\n * 功能: 刷新data.json\n * **********************************\n * @param {Array} argv - 参数(无)\n * @returns {String} - HTML文本\n */\n\nfunction refresh(argv) {\n    getJson();\n    directory = [];\n    return `<span>${languageData['updateData'][sys.getVar(\"language\")]}</span><br>`;\n}\n",
        "touch.js": "/**\n * **********************************\n * 函数名: touch\n * 功能: 创造文件\n * **********************************\n * @param {Array} argv - 参数(文件路径)\n * @returns {String} - HTML文本\n */\n\nfunction touch(argv) {\n    sys.getData(sys.storedData, getRealPath(argv[0]), true, true);\n    return ``;\n}\n",
        "vim.js": "/**\n * **********************************\n * 函数名: vim\n * 功能: 编辑文件\n * **********************************\n * @param {Array} argv - 参数(文件路径)\n * @returns {String} - HTML文本\n */\n\nfunction vim(argv) {\n    if (argv.length == 0) {\n        return `<span style=\"color: red\">${SyntaxError(languageData['parameterError'][sys.getVar(\"language\")])}</span><br>`;\n    }\n\n    // 通过判断后缀来实现高亮\n    let extensions = {\n        'md': 'markdown',\n        'py': 'python',\n        'txt': 'null'\n    };\n\n    let mode = argv[0].split(\".\").slice(-1)[0]; // 获取后缀\n    mode = (mode in extensions) ? extensions[mode] : \"null\"; // 获取模式\n\n    console.log(mode);\n\n    let filePath = getRealPath(argv[0]);\n    \n    // 设置保存函数\n    CodeMirror.commands.save = function (e) {\n        terminal.setAttribute(\"style\", \"\");\n        sys.writeData(filePath, editor.getValue(), false);\n        $(\".CodeMirror\").remove();\n        term.refocus();\n    };\n\n    // 获取需读取的文件内容\n    let fileContent = sys.getData(\n        sys.storedData,\n        filePath,\n        true,\n        true\n    );\n\n    let editor = CodeMirror(\n        document.body,\n        {\n            value: fileContent,\n            lineNumbers: true,\n            mode: mode,\n            keyMap: \"vim\",\n            matchBrackets: true,\n            showCursorWhenSelecting: true,\n            inputStyle: \"contenteditable\",\n            theme: \"ayu-mirage\"\n        }\n    );\n    editor.focus()\n\n    // 隐藏终端界面\n    terminal.setAttribute(\"style\", \"display:none;\");\n\n    return \"<br>\";\n}\n"
    },
    "boot": {},
    "home": {
        "1": {},
        "m.txt": "if"
    },
    "root": {},
    "test.txt": "第一行\n第二行\\n\n第三行",
    "tmp": {}
}